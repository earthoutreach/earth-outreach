<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs
      title="fooa"
      description="Embed an unlisted or public Picasa Video on your webpage."
      author="Sean Askay"
      author_email="alchemist@google.com"
      author_location="Mountain View, CA USA"
      author_affiliation="Google Inc"
      width="320"
      height="180">
    <Require feature="dynamic-height"/>
    <Require feature="flash"/>
    <Require feature="minimessage"/>
    <Require feature="setprefs"/>
    <Locale lang="en"/>
  </ModulePrefs>
  <UserPref name="user_id"   default_value="" required="true" datatype="string"  display_name="Username or User ID"/>
  <UserPref name="album_id"  default_value="" required="true" datatype="string"  display_name="Album ID"/>
  <UserPref name="video_id"  default_value="" required="true" datatype="string"  display_name="Video ID"/>
  <UserPref name="authkey"   default_value="" required="false" datatype="string" display_name="Authorization Key (for unlisted albums)"/>
  <UserPref name="autoplay"  default_value="1" required="true" datatype="enum"   display_name="Autoplay video">
    <EnumValue value="1" display_value="True"/>
    <EnumValue value="0" display_value="False"/>
  </UserPref>
  <UserPref name="autohide"  default_value="0" required="true" datatype="enum" display_name="Autohide Video Controls">
    <EnumValue value="1" display_value="True"/>
    <EnumValue value="0" display_value="False"/>
  </UserPref>
  <UserPref name="audio_only"  default_value="0" required="true" datatype="enum" display_name="Audio playback only">
    <EnumValue value="1" display_value="True"/>
    <EnumValue value="0" display_value="False"/>
  </UserPref>
  

  <Content type="html"><![CDATA[
    <style type="text/css">
      body {
        margin: 0px;
        padding: 0px;
      }
    </style>
    <div id="video" style="overflow: auto; background-color: black;"></div>
    <script src="https://www.google.com/jsapi" type="text/javascript"></script>
    <script type="text/javascript">

    google.load('feeds', '1');

    PREFS = new _IG_Prefs();
    MSG = new gadgets.MiniMessage(__MODULE_ID__);
    YT_CONTROLS_HEIGHT = 35;
    
    PWA_PLAYER = 'https://www.youtube.com/get_player?enablejsapi=1';



 
    function getUrlParametersFromArray (obj, delimiter) {
      var urlParams = [];
      for (key in obj) {
        urlParams.push(key + '=' + obj[key]);
      }
      return urlParams.join(delimiter);
    }


    //From: http://stackoverflow.com/questions/901115/get-query-string-values-in-javascript
    function getParamsFromUrl(url) {
      var urlParams = {};
      (function () {
        var e,
            a = /\+/g,
            r = /([^&=]+)=?([^&#]*)/g,
            d = function (s) { return decodeURIComponent(s.replace(a, ' ')); },
            q = url;

        while (e = r.exec(q))
           urlParams[d(e[1])] = d(e[2]);
      })();
      return urlParams;
    }


    function getPicasaVideoFeed (user_id, album_id, video_id, authkey){
      var feed_url = 'https://picasaweb.google.com/data/feed/api/user/' +
          user_id + '/albumid/' + album_id +
          '?alt=rss&fields=item[gphoto:id=\'' + video_id + '\']';
      feed_url += (authkey != '') ? '&authkey=' + authkey : '';
      return feed_url;
    }


    function getVideoData (video) {
      var params = new Object;
      if (video.getNamedItem('medium').value == 'video') {
        var video_width = parseInt(video.getNamedItem('width').value);
        var video_height = parseInt(video.getNamedItem('height').value);
        var video_url = video.getNamedItem('url').value;
        var video_src = video_url.split('?')[1];

        //Construct fmt_list parts
        var itag = getParamsFromUrl(decodeURIComponent(video_src)).itag;
        var size = video_width + 'x' + video_height;
        var fmt_info = (itag == 5) ?
            [itag, size, 7, 0, 0]: [itag, size, 9, 0, 115];
        params.fmt_list = fmt_info.join('/');

        //Construct fmt_streamMap
        params.fmt_stream_map = [itag, video_url.replace(/,/g, '%2C')].join('|');

        params.wide_screen = (video_width / video_height > 1.4);
        params.height = video_height;
        return params;
      }
      return false;
    }
    
    
    


      /**
        Picasa Video preview code generator (direct embed of expiring videos)

        Embed code for Picasa Videos uses a Google Gadget, so instead of
        adding <script> tags to the DOM, just directly add the video in the same
        way that the Gadget does.
      */
      var getPicasaVideoPreviewCode = function (
          width, height, fmt_list, fmt_stream_map, audio_only) {
          
        var flash_attr = {
            allowfullscreen: 'true',
            allowscriptaccess: 'always',
            modestbranding: '1',
            showinfo: '0',
            rel: '0',
            wmode: 'opaque',
            width: width,
            height: height
        };

        //Disable fullscreen for audio-only
        if (audio_only) flash_attr.allowfullscreen = 'false';
        var flashvars = {
          'fs': 1, 'hl': 'en', 'ps': 'picasaweb', 'playerapiid': 'uniquePlayerId',
          'video_id': 'picasacid', 't': 1, 'auth_timeout': 86400000000,
          'vq': 'auto', //large
          'autoplay': (audio_only) ? 1 : PREFS.getInt('autoplay'),
          'autohide': (audio_only) ? 0 : PREFS.getInt('autohide'),
          'fmt_list': encodeURIComponent(fmt_list.join(',')),
          'fmt_stream_map': encodeURIComponent(fmt_stream_map.join(','))
        };
        flash_attr.flashvars = getUrlParametersFromArray(flashvars, '&');
        gadgets.flash.embedFlash(
          PWA_PLAYER,
          'video',
          7,
          flash_attr
        );
        gadgets.window.adjustHeight();
      }
  
    


    function insertEmbedCode (target_id, embed_width, embed_height, fmt_list,
        fmt_stream_map, autohide) {
      var url_params = {
        'fs': 1, 'hl': 'en', 'ps': 'picasaweb', 'playerapiid': 'uniquePlayerId',
        'video_id': 'picasacid', 't': 1, 'auth_timeout': 86400000000,
        'vq': 'auto', //large
        'autoplay': PREFS.getString('autoplay'),
        'autohide': autohide,
        'fmt_list': encodeURIComponent(fmt_list.reverse().join(',')),
        'fmt_stream_map': encodeURIComponent(fmt_stream_map.reverse().join(','))
      };
      var flashvars = getUrlParametersFromArray(url_params, '&');

      gadgets.flash.embedFlash(
          'https://www.youtube.com/get_player?enablejsapi=1',
          target_id,
          7,
          {
            allowfullscreen: 'true',
            allowscriptaccess: 'always',
            scale: 'noScale',
            wmode: 'opaque',
            modestbranding: 1,
            rel: 0,
            showinfo: 0,
            width: embed_width,
            height: embed_height,
            flashvars: flashvars
          }
      );
      console.log(embed_height);
      gadgets.window.adjustHeight();
    }
    

    function embedVideo (result) {
      var fmt_list = [];
      var fmt_stream_map = [];
      var video_params = false;

      var xml_results = google.feeds.getElementsByTagNameNS(
          result.xmlDocument.getElementsByTagName('item')[0],
          'http://search.yahoo.com/mrss/', 'content');

      for (var i = 0; i < xml_results.length; i++) {
        video_params = getVideoData(xml_results[i].attributes);
        if (video_params) {
          fmt_list.push(video_params.fmt_list);
          console.log(video_params.fmt_stream_map);
          fmt_stream_map.push(video_params.fmt_stream_map);
        }
      }

      if (fmt_list && fmt_stream_map) {
        var viewport = gadgets.window.getViewportDimensions();
        var embed_width = viewport.width;
        var embed_height = (video_params.wide_screen) ?
            Math.round(embed_width * (9.0/16.0)) :
            Math.round(embed_width * (3.0/4.0));
            
        var audio_only = PREFS.getBool('audio_only');
        if (audio_only)
          embed_height = YT_CONTROLS_HEIGHT;
        else {
          embed_height = (PREFS.getBool('autohide') == 0) ?
              embed_height + YT_CONTROLS_HEIGHT : embed_height;
        }
              
        console.log('video size: ' + embed_width + 'x' + embed_height);
        var embed_code = getPicasaVideoPreviewCode(embed_width, embed_height,
            fmt_list, fmt_stream_map, audio_only);
        document.getElementById('video').innerHTML = embed_code;
      }
      else {
        console.log('No video in this feed.');
        MSG.createDismissibleMessage('The video ID you provided doesn\'t' + 
            'refer to a video.');
      }
    }


    function fetchFeed (feed_url, callback) {
      console.log(feed_url);
      var feed = new google.feeds.Feed(feed_url);
      feed.setResultFormat(google.feeds.Feed.XML_FORMAT);
      feed.load(function(result) {
        if (result.error) {
          console.log('Error: ' + result.error.code + ' ' +
              result.error.message);
          MSG.createDismissibleMessage(
              'Sorry, there was an error fetching the feed for this video. ' +
              'Error: ' + result.error.code + ' ' + result.error.message);
          return false;
        }
        callback(result);
      });
    }


    gadgets.util.registerOnLoadHandler(function () {
      var feed_url = getPicasaVideoFeed(PREFS.getString('user_id'),
          PREFS.getString('album_id'), PREFS.getString('video_id'),
          PREFS.getString('authkey'));
      fetchFeed(feed_url, embedVideo);
    });

    </script>
]]></Content>
</Module>